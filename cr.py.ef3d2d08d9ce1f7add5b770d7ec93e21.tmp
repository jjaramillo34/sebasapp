import streamlit as st
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from plotly import graph_objs as go

st.set_page_config(layout="wide", page_icon="ðŸ’°", page_title="CR Report")
st.markdown("""
<style>
div[data-testid="metric-container"] {
   background-color: rgba(28, 131, 225, 0.1);
   border: 1px solid rgba(28, 131, 225, 0.1);
   padding: 5% 5% 5% 10%;
   border-radius: 5px;
   color: rgb(205, 104, 0);
   overflow-wrap: break-word;
}

/* breakline for metric text         */
div[data-testid="metric-container"] > label[data-testid="stMetricLabel"] > div {
   overflow-wrap: break-word;
   white-space: break-spaces;
   color: black;
}
</style>
""", unsafe_allow_html=True)

# load data from csv file from main file Acis_Sales_Master_Export_Matched.csv
def load_data_main():
    # load the data from the csv file online and return a dataframe
    #data = pd.read_csv('https://github.com/jjaramillo34/sebasapp/blob/master/Acris_Sales_Master_Export_Matched.csv', low_memory=False)
    #print(data.columns)
    data = pd.read_csv('Acris_Sales_Master_Export_Matched.csv', low_memory=False)
    # make a copy of the dataframe
    copy_df = data.copy()
    # make the column names lower case
    copy_df.columns = copy_df.columns.str.lower()
    # concatenate address and street name
    copy_df['address1'] = copy_df['address'] + ' ' + copy_df['street']
    # drop the columns address and street
    copy_df.drop(columns=['address', 'street'], inplace=True)
    # rename the column address1 to address
    copy_df.rename(columns={'address1': 'address'}, inplace=True)
    # certains rows from the column flag Orange Flag, Yellow Flag, Red Flag, Inactive Flag and Oulier Flag
    copy_df = copy_df[~copy_df['flag'].isin(['Orange Flag', 'Yellow Flag', 'Red Flag', 'Inactive', 'Outlier'])]
    # drop the columns history_id, unit_id, CONCIERGE	FT_DOORMAN	PT_DOORMAN	ATTENDED_LOBBY
    copy_df = copy_df.drop(columns=['history_id', 'unit_id', 'concierge', 'ft_doorman', 'pt_doorman', 'attended_lobby'])
    # remove metro group QN, SI and BX
    copy_df = copy_df[~copy_df['metro'].isin(['QN', 'SI', 'BX'])]
    # save the dataframe to a csv file
    copy_df.to_csv('acris_sales_master_export_matched_clean.csv', index=False)
    return copy_df
  
# execute the function to load the data from the csv file main
load_data_main()
  
def load_data():
    # load the data from the csv file online and return a dataframe
    data = pd.read_csv('acris_sales_master_export_matched_clean.csv', low_memory=False)
    return data

def main():
  data = load_data()
  
  st.title("CR Report")
  # make a copy of the dataframe
  new_df = data.copy()

  # make the column names lower case
  new_df.columns = new_df.columns.str.lower()

  # remove certains rows from the column flag Orange Flag, Yellow Flag, Red Flag, Inactive Flag and Oulier Flag
  #new_df = new_df[~new_df['flag'].isin(['Orange Flag', 'Yellow Flag', 'Red Flag', 'Inactive', 'Outlier'])]
  
  # remove year 2013 or less
  st.sidebar.subheader('Select Year')
  year_input = st.sidebar.slider('Year', 2013, 2023, 2013)
  st.sidebar.subheader('Select Metro')
  
  unique_metro = new_df['metro'].unique()
  # remove QN, SI and BX and Nan
  unique_metro = unique_metro[unique_metro != 'QN']
  # drop nan values
  unique_metro = unique_metro[~pd.isna(unique_metro)]
  metro_input = st.sidebar.radio('Metro', unique_metro)
  
  metro_old = new_df[new_df['metro'] == metro_input]
  metro_old = metro_old[metro_old['sale_year'] < 2013]
  
  #metro_old = new_df[new_df['metro'].isin(['MAN', 'BK'])]
  #metro_old = metro_old[metro_old['sale_year'] < 2013]
  
  metro = new_df[new_df['metro'] == metro_input]
  metro = metro[metro['sale_year'] > 2012]
  #metro = new_df[new_df['metro'].isin(['MAN', 'BK'])]
  #metro = metro[metro['sale_year'] > 2012]
  # create a pivot table for average sale price each year by metro
  yearly_avg_price = pd.pivot_table(metro, index=['metro', 'sale_year', "bldg_type"], values=['sale_price'], aggfunc='mean')
  yearly_avg_price = yearly_avg_price.reset_index()
  yearly_avg_price = yearly_avg_price[yearly_avg_price['sale_year'] == year_input]
  previouse_year = year_input - 1
  if year_input == 2013:
      previouse_year_avg_price = pd.pivot_table(metro_old, index=['metro', 'sale_year', "bldg_type"], values=['sale_price'], aggfunc='mean')
      previouse_year_avg_price = previouse_year_avg_price.reset_index()
      previouse_year_avg_price = previouse_year_avg_price[previouse_year_avg_price['sale_year'] == previouse_year]
  else:
      previouse_year_avg_price = pd.pivot_table(metro, index=['metro', 'sale_year', "bldg_type"], values=['sale_price'], aggfunc='mean')
      previouse_year_avg_price = previouse_year_avg_price.reset_index()
      previouse_year_avg_price = previouse_year_avg_price[previouse_year_avg_price['sale_year'] == previouse_year]
  # total sales amount by year and metro group    
  total_sales = pd.pivot_table(metro, index=['metro', 'sale_year', "bldg_type"], values=['sale_price'], aggfunc='count')
  total_sales = total_sales.reset_index()
  total_sales = total_sales[total_sales['sale_year'] == year_input]
  
  if year_input == 2013:
      previouse_year_total_sales = pd.pivot_table(metro_old, index=['metro', 'sale_year', "bldg_type"], values=['sale_price'], aggfunc='count')
      previouse_year_total_sales = previouse_year_total_sales.reset_index()
      previouse_year_total_sales = previouse_year_total_sales[previouse_year_total_sales['sale_year'] == previouse_year]
  else:
      previouse_year_total_sales = pd.pivot_table(metro, index=['metro', 'sale_year', "bldg_type"], values=['sale_price'], aggfunc='count')
      previouse_year_total_sales = previouse_year_total_sales.reset_index()
      previouse_year_total_sales = previouse_year_total_sales[previouse_year_total_sales['sale_year'] == previouse_year]

  # price per square foot by year and metro group
  price_per_sqft = pd.pivot_table(metro, index=['metro', 'sale_year', "bldg_type"], values=['ppsf'], aggfunc='mean')
  price_per_sqft = price_per_sqft.reset_index()
  price_per_sqft = price_per_sqft[price_per_sqft['sale_year'] == year_input]
  
  if year_input == 2013:
    previouse_year_price_per_sqft = pd.pivot_table(metro_old, index=['metro', 'sale_year', "bldg_type"], values=['ppsf'], aggfunc='mean')
    previouse_year_price_per_sqft = previouse_year_price_per_sqft.reset_index()
    previouse_year_price_per_sqft = previouse_year_price_per_sqft[previouse_year_price_per_sqft['sale_year'] == previouse_year]
  else:
    previouse_year_price_per_sqft = pd.pivot_table(metro, index=['metro', 'sale_year', "bldg_type"], values=['ppsf'], aggfunc='mean')
    previouse_year_price_per_sqft = previouse_year_price_per_sqft.reset_index()
    previouse_year_price_per_sqft = previouse_year_price_per_sqft[previouse_year_price_per_sqft['sale_year'] == previouse_year]
  
  
  # create a pivot table for average sale price each year by metro
  cols = st.columns(2)
  with cols[0]:
      # metrics for average sale price
      st.subheader('Average Sale Price')
      # metrics by building type condo, coop and condop for each metro group 
      condo = round(int(yearly_avg_price[yearly_avg_price['bldg_type'] == 'condo']['sale_price'].mean()), 2)
      coop = round(int(yearly_avg_price[yearly_avg_price['bldg_type'] == 'coop']['sale_price'].mean()), 2)
      condop = round(int(yearly_avg_price[yearly_avg_price['bldg_type'] == 'condop']['sale_price'].mean()), 2)
      # variables for previous year
      condo_prev = round(int(previouse_year_avg_price[previouse_year_avg_price['bldg_type'] == 'condo']['sale_price'].mean()), 2)
      coop_prev = round(int(previouse_year_avg_price[previouse_year_avg_price['bldg_type'] == 'coop']['sale_price'].mean()), 2)
      condop_prev = round(int(previouse_year_avg_price[previouse_year_avg_price['bldg_type'] == 'condop']['sale_price'].mean()), 2)
      # calculate the deltas
      delta1 = round((int(condo) - int(condo_prev)) / int(condo_prev) * 100, 2)
      delta2 = round((int(coop) - int(coop_prev)) / int(coop_prev) * 100, 2)
      delta3 = round((int(condop) - int(condop_prev)) / int(condop_prev) * 100, 2)
      # display the metrics
      st.metric(label='Condo', value=f"${format(condo, ',d')}", delta=f"{delta1}% from the previous year average sale price of ${format(condo_prev, ',d')}")
      st.metric(label='Coop', value=f"${format(coop, ',d')}", delta=f"{delta2}% from the previous year average sale price of ${format(coop_prev, ',d')}")
      st.metric(label='Condop', value=f"${format(condop, ',d')}", delta=f"{delta3}% from the previous year average sale price of ${format(condop_prev, ',d')}")
      
  with cols[1]:
      import plotly.express as px
      st.subheader('Total Sales Amount by Average Sale Price')
      # plot average sale price by year and metro group by bldg_type different colors
      fig = px.bar(yearly_avg_price, x='sale_year', y='sale_price', color='bldg_type', barmode='group', title='Average Sale Price by Year and Building Type')

      st.plotly_chart(fig, theme="streamlit", use_container_width=True)
      
  cols = st.columns(2)
  with cols[0]:
    st.subheader('Average Total Sales Amount')
    condo = round(int(total_sales[total_sales['bldg_type'] == 'condo']['sale_price'].sum()), 2)
    coop = round(int(total_sales[total_sales['bldg_type'] == 'coop']['sale_price'].sum()), 2)
    condop = round(int(total_sales[total_sales['bldg_type'] == 'condop']['sale_price'].sum()), 2)
    # variables for previous year
    condo_prev = round(int(previouse_year_total_sales[previouse_year_total_sales['bldg_type'] == 'condo']['sale_price'].sum()), 2)
    coop_prev = round(int(previouse_year_total_sales[previouse_year_total_sales['bldg_type'] == 'coop']['sale_price'].sum()), 2)
    condop_prev = round(int(previouse_year_total_sales[previouse_year_total_sales['bldg_type'] == 'condop']['sale_price'].sum()), 2)
    # calculate the deltas
    delta1 = round((int(condo) - int(condo_prev)) / int(condo_prev) * 100, 2)
    delta2 = round((int(coop) - int(coop_prev)) / int(coop_prev) * 100, 2)
    delta3 = round((int(condop) - int(condop_prev)) / int(condop_prev) * 100, 2)
    
    st.metric(label='Condo', value=f"{format(condo, ',d')}", delta=f"{delta1}% from the previous year total sales amount of {format(condo_prev, ',d')}")
    st.metric(label='Coop', value=f"{format(coop, ',d')}", delta=f"{delta2}% from the previous year total sales amount of {format(coop_prev, ',d')}")
    st.metric(label='Condop', value=f"{format(condop, ',d')}", delta=f"{delta3}% from the previous year total sales amount of {format(condop_prev, ',d')}")
    
  with cols[1]:
    st.subheader('Total Sales Amount by Building Type')
    # plot average sale price by year and metro group by bldg_type different colors
    fig = px.bar(total_sales, x='sale_year', y='sale_price', color='bldg_type', barmode='group', title='Total Sales Amount by Year and Building Type')

    st.plotly_chart(fig, theme="streamlit", use_container_width=True)
    
  cols = st.columns(2)
  with cols[0]:
    st.subheader('Average Price per Square Foot')
    condo = round(int(price_per_sqft[price_per_sqft['bldg_type'] == 'condo']['ppsf'].mean()), 2)
    coop = round(int(price_per_sqft[price_per_sqft['bldg_type'] == 'coop']['ppsf'].mean()), 2)
    condop = round(int(price_per_sqft[price_per_sqft['bldg_type'] == 'condop']['ppsf'].mean()), 2)
    # variables for previous year
    condo_prev = round(int(previouse_year_price_per_sqft[previouse_year_price_per_sqft['bldg_type'] == 'condo']['ppsf'].mean()), 2)
    coop_prev = round(int(previouse_year_price_per_sqft[previouse_year_price_per_sqft['bldg_type'] == 'coop']['ppsf'].mean()), 2)
    condop_prev = round(int(previouse_year_price_per_sqft[previouse_year_price_per_sqft['bldg_type'] == 'condop']['ppsf'].mean()), 2)
    # calculate the deltas
    delta1 = round((int(condo) - int(condo_prev)) / int(condo_prev) * 100, 2)
    delta2 = round((int(coop) - int(coop_prev)) / int(coop_prev) * 100, 2)
    delta3 = round((int(condop) - int(condop_prev)) / int(condop_prev) * 100, 2)
    
    st.metric(label='Condo', value=f"${format(condo, ',d')}", delta=f"{delta1}% from the previous year average price per square foot of ${format(condo_prev, ',d')}")
    st.metric(label='Coop', value=f"${format(coop, ',d')}", delta=f"{delta2}% from the previous year average price per square foot of ${format(coop_prev, ',d')}")
    st.metric(label='Condop', value=f"${format(condop, ',d')}", delta=f"{delta3}% from the previous year average price per square foot of ${format(condop_prev, ',d')}")
  
  with cols[1]:
    st.subheader('Average Price per Square Foot by Building Type')
    # plot average sale price by year and metro group by bldg_type different colors
    fig = px.bar(price_per_sqft, x='sale_year', y='ppsf', color='bldg_type', barmode='group', title='Average Price per Square Foot by Year and Building Type')
    
    st.plotly_chart(fig, theme="streamlit", use_container_width=True)
    
if __name__ == "__main__":
  main()

